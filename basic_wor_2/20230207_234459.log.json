{"env_info": "sys.platform: win32\nPython: 3.7.13 (default, Mar 28 2022, 08:03:21) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2060\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\nNVCC: Not Available\nGCC: n/a\nPyTorch: 1.7.1+cu101\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192729112\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191125 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 2019\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.4\n  - Magma 2.5.4\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -openmp:experimental -DNDEBUG -DUSE_FBGEMM -DUSE_VULKAN_WRAPPER, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.8.2+cu101\nOpenCV: 4.6.0\nMMCV: 1.4.0\nMMCV Compiler: MSVC 192930137\nMMCV CUDA Compiler: 10.1\nMMDetection: 2.25.2+6a074d1", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'E:\\mmdetection-master\\balloon'\nCLASSES = ('balloon', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='E:\\mmdetection-master\\balloon/train.json',\n        img_prefix='E:\\mmdetection-master\\balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='E:\\mmdetection-master\\balloon/val.json',\n        img_prefix='E:\\mmdetection-master\\balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='E:\\mmdetection-master\\balloon/val.json',\n        img_prefix='E:\\mmdetection-master\\balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'E:\\mmdetection-master\\checkpoints\\mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs\\mask_rcnn_r50_fpn_1x_ballon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 872873923, "exp_name": "mask_rcnn_r50_fpn_1x_ballon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.325, "bbox_mAP_50": 0.473, "bbox_mAP_75": 0.439, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.219, "bbox_mAP_l": 0.395, "bbox_mAP_copypaste": "0.325 0.473 0.439 0.000 0.219 0.395", "segm_mAP": 0.377, "segm_mAP_50": 0.493, "segm_mAP_75": 0.46, "segm_mAP_s": 0.0, "segm_mAP_m": 0.256, "segm_mAP_l": 0.455, "segm_mAP_copypaste": "0.377 0.493 0.460 0.000 0.256 0.455"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.547, "bbox_mAP_50": 0.8, "bbox_mAP_75": 0.697, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.394, "bbox_mAP_l": 0.633, "bbox_mAP_copypaste": "0.547 0.800 0.697 0.000 0.394 0.633", "segm_mAP": 0.693, "segm_mAP_50": 0.794, "segm_mAP_75": 0.778, "segm_mAP_s": 0.0, "segm_mAP_m": 0.596, "segm_mAP_l": 0.768, "segm_mAP_copypaste": "0.693 0.794 0.778 0.000 0.596 0.768"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.71, "bbox_mAP_50": 0.875, "bbox_mAP_75": 0.838, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.648, "bbox_mAP_l": 0.765, "bbox_mAP_copypaste": "0.710 0.875 0.838 0.000 0.648 0.765", "segm_mAP": 0.754, "segm_mAP_50": 0.875, "segm_mAP_75": 0.859, "segm_mAP_s": 0.0, "segm_mAP_m": 0.675, "segm_mAP_l": 0.821, "segm_mAP_copypaste": "0.754 0.875 0.859 0.000 0.675 0.821"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.667, "bbox_mAP_50": 0.802, "bbox_mAP_75": 0.759, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.465, "bbox_mAP_l": 0.76, "bbox_mAP_copypaste": "0.667 0.802 0.759 0.000 0.465 0.760", "segm_mAP": 0.696, "segm_mAP_50": 0.781, "segm_mAP_75": 0.781, "segm_mAP_s": 0.0, "segm_mAP_m": 0.468, "segm_mAP_l": 0.803, "segm_mAP_copypaste": "0.696 0.781 0.781 0.000 0.468 0.803"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.75, "bbox_mAP_50": 0.891, "bbox_mAP_75": 0.872, "bbox_mAP_s": 0.151, "bbox_mAP_m": 0.694, "bbox_mAP_l": 0.798, "bbox_mAP_copypaste": "0.750 0.891 0.872 0.151 0.694 0.798", "segm_mAP": 0.758, "segm_mAP_50": 0.891, "segm_mAP_75": 0.859, "segm_mAP_s": 0.252, "segm_mAP_m": 0.682, "segm_mAP_l": 0.809, "segm_mAP_copypaste": "0.758 0.891 0.859 0.252 0.682 0.809"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.675, "bbox_mAP_50": 0.851, "bbox_mAP_75": 0.822, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.571, "bbox_mAP_l": 0.735, "bbox_mAP_copypaste": "0.675 0.851 0.822 0.050 0.571 0.735", "segm_mAP": 0.731, "segm_mAP_50": 0.853, "segm_mAP_75": 0.83, "segm_mAP_s": 0.227, "segm_mAP_m": 0.575, "segm_mAP_l": 0.796, "segm_mAP_copypaste": "0.731 0.853 0.830 0.227 0.575 0.796"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.612, "bbox_mAP_50": 0.843, "bbox_mAP_75": 0.811, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.48, "bbox_mAP_l": 0.677, "bbox_mAP_copypaste": "0.612 0.843 0.811 0.000 0.480 0.677", "segm_mAP": 0.708, "segm_mAP_50": 0.843, "segm_mAP_75": 0.824, "segm_mAP_s": 0.0, "segm_mAP_m": 0.509, "segm_mAP_l": 0.794, "segm_mAP_copypaste": "0.708 0.843 0.824 0.000 0.509 0.794"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.651, "bbox_mAP_50": 0.795, "bbox_mAP_75": 0.795, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.466, "bbox_mAP_l": 0.727, "bbox_mAP_copypaste": "0.651 0.795 0.795 0.000 0.466 0.727", "segm_mAP": 0.697, "segm_mAP_50": 0.769, "segm_mAP_75": 0.769, "segm_mAP_s": 0.0, "segm_mAP_m": 0.502, "segm_mAP_l": 0.784, "segm_mAP_copypaste": "0.697 0.769 0.769 0.000 0.502 0.784"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.694, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.803, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.54, "bbox_mAP_l": 0.768, "bbox_mAP_copypaste": "0.694 0.803 0.803 0.000 0.540 0.768", "segm_mAP": 0.719, "segm_mAP_50": 0.803, "segm_mAP_75": 0.777, "segm_mAP_s": 0.0, "segm_mAP_m": 0.535, "segm_mAP_l": 0.803, "segm_mAP_copypaste": "0.719 0.803 0.777 0.000 0.535 0.803"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.703, "bbox_mAP_50": 0.81, "bbox_mAP_75": 0.782, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.562, "bbox_mAP_l": 0.777, "bbox_mAP_copypaste": "0.703 0.810 0.782 0.000 0.562 0.777", "segm_mAP": 0.719, "segm_mAP_50": 0.81, "segm_mAP_75": 0.782, "segm_mAP_s": 0.0, "segm_mAP_m": 0.537, "segm_mAP_l": 0.802, "segm_mAP_copypaste": "0.719 0.810 0.782 0.000 0.537 0.802"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.692, "bbox_mAP_50": 0.806, "bbox_mAP_75": 0.806, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.478, "bbox_mAP_l": 0.778, "bbox_mAP_copypaste": "0.692 0.806 0.806 0.000 0.478 0.778", "segm_mAP": 0.716, "segm_mAP_50": 0.806, "segm_mAP_75": 0.777, "segm_mAP_s": 0.0, "segm_mAP_m": 0.517, "segm_mAP_l": 0.804, "segm_mAP_copypaste": "0.716 0.806 0.777 0.000 0.517 0.804"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.688, "bbox_mAP_50": 0.808, "bbox_mAP_75": 0.808, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.485, "bbox_mAP_l": 0.772, "bbox_mAP_copypaste": "0.688 0.808 0.808 0.000 0.485 0.772", "segm_mAP": 0.717, "segm_mAP_50": 0.808, "segm_mAP_75": 0.777, "segm_mAP_s": 0.0, "segm_mAP_m": 0.514, "segm_mAP_l": 0.806, "segm_mAP_copypaste": "0.717 0.808 0.777 0.000 0.514 0.806"}
